За да се добави даденото географско положение към EXIF-а на снимките, скриптът използва exiftool. Ако този tool не е инсталиран, скриптът отново ще работи, но няма да добавя географското местоположение.

---редове 3-7---
if ! [[ -d ${1} ]]
then
	echo "${1} is not a valid directory."
	exit
fi

Проверка дали подадената като първи позиционен параметър директория съществува.

---редове 9-84---
Външният while цикъл върти директориите, намиращи се в подадената като позиционен параметър директория.

< <(find "${1}" -mindepth 1 -maxdepth 1 -type d -printf "%f\0")

Чрез process substitution се подава резултатът от find командата на цикъла.
-mindepth 1, за да не включва текущата директория ".".
-maxdepth 1, защото в условието беше казано, че търсим двойки (директория, .log файл) само в главната директория.
-printf "%f\0", за да изкара само имената на директориите, без името на parent директорията; разделя ги с ASCII NUL.

---за всяка намерена директория от външния цикъл---
---редове 11-17---
logFile="${1}/${name}.log"

if ! [[ -f "${logFile}" ]]
then
	echo ".log file for directory ${name} doesn't exist"
	continue
fi

Първо се проверява дали съществува .log файл за подадената директория. Ако не - не обработва тази директория и преминава на следващата.

---редове 19-21---
counter=0
firstLine=""
description=""

Променливи, в които ще се пази информация за всяка от намерените снимки в обработваната директория.

---редове 23-27---
picArray=()
while read picname
do
	picArray+=("${picname}")
done < <(find "${1}/${name}" -type f -name "*.jpg" -printf "%p\0" -exec stat -c %Z {} \; | sort -t '\0' -k 2 -n | cut -d '' -f 1)

Цикъл, който намира всички снимки в обработваната директория, сортира ги по ctime от най-стар към най-нов и ги записва в масива picArray.
Чрез process substitution се подава резултатът от find командата на цикъла.
-name "*.jpg", за да не обработим различни формати файлове, ако случайно директорията съдържа такива.
-printf "%p\0", за да може да се покажат на един и същи ред пътят до снимката и нейният ctime, разделени с ASCII NUL символ.
-exec -c %Z {} \;, за да се покаже ctime (в UNIX time формат) срещу съответния път.
sort -t '\0' -k 2 -n сортира файловете по ctime от най-стар към най-нов.
cut -d '' -f 1 премахва информацията за ctime от редовете и оставя само пътя към файловете.

---редове 29-64---
while цикъл, който чете .log файла за обработваната директория ред по ред и обработва информацията.
< "${logFile}"

---редове 31-35---
if [[ ${firstLine} == "" ]]
then
	firstLine=${line}
	continue
fi

Ако променливата firstLine е празна за текущия запис от .log файла, означава, че сме започнали да четем информация за нова снимка. Запазваме реда в променливата firstLine и минаваме на следващия ред.

---редове 37-41---
if [[ ${description} == "" ]]
then
	description=${line}
	continue
fi

Ако променливата description е празна за текущия запис от .log файла, означава, че вече сме започнали да четем информация за някоя снимка и имаме първия ред (записан във firstLine), т.е. намираме се на втория ред. Запазваме реда в променливата description и минаваме на следващия ред.

---редове 43-63---
if [[ ${line} == "" ]]

В условието пишеше, че разделителят между 2 записа в .log файла е празен ред, затова проверяваме дали прочетеният ред е празен и ако е, означава, че сме прочели целия запис за дадена снимка - време е да правим промени, според прочетените данни. С тези 3 проверки в цикъла не обработваме ненужните редове от описанието след първия (пропускат се).

---ред 45---
dateString=${firstLine% *}

Разделя променливата firstLine по space и записва в dateString само първата ѝ част, която е датата в UNIX time.

---ред 46---
coordinatesString=${firstLine#* }

Разделя променливата firstLine по space и записва в coordinateString само втората ѝ част, която е географско местоположение.

---ред 48---
parsedDescription=$(echo -e "${description}" | tr A-Z a-z | sed 's/[^[0-9a-z ]*//g' | tr -s " " | tr " " "_")

Parse-ва description променливата и запазва резултата в променливата parsedDescription.
tr A-Z a-z замества всички главни букви с малки.
sed 's/[^[0-9a-z ]*//g' премахва всички символи, освен малки букви, цифри и интервали.
tr -s " " замества повторенията на интервал само с 1.
tr " " "_" замества интервалите с долни черти.

Тъй като в крайна сметка не беше уточнено дали трябва да премахваме долните черти от оригиналния текст, ако има такива, ги премахвам, а след това замествам интервалите с долни черти.

---ред 50---
newPic="${1}/${name}/$(date -d @${dateString} +%Y-%m-%dT%H%M)_${parsedDescription}.jpg"

Новото име на снимката, заедно с пътя към нея.
$(date -d @${dateString} +%Y-%m-%dT%H%M) осигурява формата YYYY-MM-DDTHHMM на датата като конвертира променливата dateString, която съдържа UNIX time.

---ред 51---
mv ${picArray[${counter}]} ${newPic}

Преименува снимката, отговаряща на текущо обработвания запис с новото ѝ име.

---редове 53-58---
if [[ $(type exiftool) ]]
then
	latitude=${coordinatesString%,*}
	longitude=${coordinatesString#*,}
	exiftool -overwrite_original -GPSLatitude=${latitude} -GPSLongitude=${longitude} ${newPic}
fi

Проверява дали на системата има инсталиран exiftool и ако да, добавя географското местоположение в EXIF-а на снимката.
latitude=${coordinatesString%,*} разделя променливата coordinatesString по "," и записва в latitude само първата ѝ част, която е географска ширина.
longitude=${coordinatesString#*,} разделя променливата coordinatesString по "," и записва в longitude само втората ѝ част, която е географска дължина.

-overwrite_original, за да не се създават "_original" файлове.

---редове 60-62---
firstLine=""
description=""
counter=$(( counter + 1 ))

След като вече е прочетен даден запис за снимка, reset-ва променливите firstLine и description, за да може да продължи четенето на следващия запис и инкрементира променливата counter, за да може да взима правилния път към оригинална снимка от picArray, когато преименува.

---редове 66-82---
if [[ ${line} != "" ]]

Тестовите .log файлове не завършваха с нов ред и в такъв случай, последният запис от всеки .log файл нямаше да бъде обработен. Затова прихваща този случай и прави същите операции като случая, когато прочита празен ред в while цикъла.
