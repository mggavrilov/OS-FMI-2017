Тук ще разясня само специфичните за бонус задачата промени, останалата информация е в документацията на оригиналната задача.

Чертая спирала с център центъра на картинката и край - нарисуваната преди това рамка. Всеки пиксел е с произволно генерирани цветове.

Тук се пазят координатите на центъра:
double centerX = width / 2;
double centerY = absHeight / 2;

Тук ще се пазят координатите на пиксела, който искаме да начертаем, в началото са центъра:
double currentX = centerX;
double currentY = centerY;

Тук се пази текущия ъгъл:
double t = 0;

Тук се пази разстоянието между индивидуалните завъртания на спиралата. По-голямо число = по-голямо разстояние.
double spacing = 1;

Условието на цикъла е:
while(currentX > 6 && currentX < width - 7 && currentY > 6 && currentY < absHeight - 7)
Т.е. докато не стигнем рамката.

Чрез този код взимаме текущото време в наносекунди:
uint32_t ns;
struct timespec spec;

clock_gettime(CLOCK_REALTIME, &spec);

ns = spec.tv_nsec;

Подаваме получената стойност за seed на random функцията:
srand(ns);

Генерираме произволно число за всеки цвят от пиксела, който обработваме в момента.
uint8_t c0 = rand() % 256;
uint8_t c1 = rand() % 256;
uint8_t c2 = rand() % 256;

Уравнението на спирала; в currentX, currentY пазим координатите на пиксела, който ще запълним.
currentX = spacing * t * cos(t) + centerX;
currentY = spacing * t * sin(t) + centerY;

Променяме цветовете с произволно генерираните.
colorTable[(uint32_t)(currentY)][(uint32_t)(currentX)][0] = c0;
colorTable[(uint32_t)(currentY)][(uint32_t)(currentX)][1] = c1;
colorTable[(uint32_t)(currentY)][(uint32_t)(currentX)][2] = c2;

Увеличаваме променливата за ъгъла. Колкото по-малка е тази стойност, толкова по-гъсто ще са разположени пикселите на спиралата.
t += 0.001;

Направил съм малки промени по Makefile-а, но съм запазил флаговете за компилатора, които бяха дадени по условие.
-D_POSIX_C_SOURCE=199309L е необходимо, защото c99 не знае за clock_gettime и CLOCK_REALTIME.
-lm е флаг за линкера, който да се свърже с библиотеката за математика, иначе неща като sin() и cos() не работят, понеже gcc не знае стойността по време на компилация.
Размених местата на 'foo' и 'main', защото в противен случай по някаква причина не отчиташе -lm флага.